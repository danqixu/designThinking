
############### enodia animated transparent box ############### 

enoAnimTranspBox: 
  enoAnimTranspBox:
    core:
      __init__(**kwargs):
      draw(screen):
      getCenter():
      startAnim(targetInterpolationExtent=1):
      err(msg): 

    support:
      isTRCached(x, y): 
      getTRCached(x, y):
      setTRCache(x, y, val):
      add(v1, v2):
      diff(v1, v2):
      animInterpolateSetup():
      animInterpolate():
      setBounds(topLeft, bottomRight):
      calcWidthHeight():
      buildBox():
      updateDrawingCoords():

  enoTranspSurfaceCache:
    core:
      __init__(**kwargs):
      isTRCached(x, y):  
      getTRCached(x, y):  
      setTRCache(x, y, val):  

############### enodia button ############### 

enoButton:
  enoButton:
    core:
      __init__(**kwargs):
      err(msg): 
      msg(msg): 

      isToggledOn(): 
      toggle():

      addCallback(callback):
      invokeCallbacks():
      clearCallbacks(): 

      draw(screen):
      on_mouse_down(pos)

    support:
      postAnimCb():
      launchAnim(self):
      animate(postAnimPos):
      nudgeY(dy): 
      nudgeXY(dx, dy): 

############### enodia button array ############### 

enoButtonArray:
  enoButtonArray:
    core:
      err(msg): 
      msg(msg): 
      __init__(**kwargs): 
     getNumButtons():
     getButtonIdx(idx):
     toggleButtonIdx(idx):
     addCallback(callback):
     clearCallbacks():
     invokeCallbacks(buttonName):
     expandContract():

    draw(screen): 
    on_mouse_down(pos):

############### enodia contents, pygame zero ############### 

enoContentsPgz:
  ContentsPgz(ContentsYaml):
    core: 
      __init__(self): 
      err(msg): 
      buildUI(): 

      draw(screen): 
      on_mouse_down(pos): 
      on_mouse_move(rel, buttons): 
      on_mouse_up(): 
      draw(): 
      on_mouse_down(pos):

############### enodia contents : yaml ############### 

enoContentsYaml
  ContentYaml: 
    core:
      __init__(**kwargs):
    err(msg): 
    setFieldsFromYaml(yd):
    setField(field, val):  
    getField(field):       
    getFields(fields):       
    printContentField(targetField):    
    print(): 

  ContentsYaml: 
    __init__(**kwargs):
    err(msg): 
    size(): 
    loadYaml(): 
    printContentFields(field): 
    getContent(i): 

############### enodia glyph array, pygame zero############### 

enoGlyphArrayPgz:
  enoGlyphArrayPgz:
    core:
      __init__(): 
      err(msg): 
      draw(screen): 
      on_mouse_down(pos): 
      on_mouse_move(rel, buttons): 
      on_mouse_up(): 
      buildUI(): 

fn: enoKbdMgr.py
class enoKbdMgr:
  def __init__(self, **kwargs):
    self.__dict__.update(kwargs) #allow class fields to be passed in constructor
  def err(self, msg): print("enoKbdMgr error:", msg);  traceback.print_exc()
  def msg(self, msg): print("enoKbdMgr message:", msg)
  def registerKeyCallback(self, whichKey, callback): #maintain in a list, as multiple callbacks may be present
  def registerKeyCallbacks(self, whichKey, callbackList): 
  def triggerKeyCallbacks(self, whichKey): 
  def getBoundKeys(self): 
  def isKeyBound(self, whichKey): 
  def on_key_down(self, key): 
  def on_key_up(self, key): pass #not always to be ignored; more to come
fn: enoTranspWinDance.py
class enoTranspWinDance:
  def __init__(self, **kwargs):
    self.__dict__.update(kwargs) #allow class fields to be passed in constructor
  def getWinCoordProxies(self, whichWinId):
  def firstFrame(self):
  def animTransition1(self):
  def draw(self):
  def draw(): et8.draw()
fn: enoWinMgr.py
class enoWinMgr:
  def __init__(self, **kwargs):
    self.__dict__.update(kwargs) #allow class fields to be passed in constructor
  def newWindow(self, name, w,h):
  def getWindow(self, name=None):
  def moveWindow(self, pWindow, x, y):
  def moveWindowById(self, windowId, x, y, pWindows):
  def transpWinSetup(self, screen, keyColor, winWidth, winHeight, pWindow=None):
fn: exAnimTranspBox1.py
def draw(): screen.clear(); eatb1.draw(screen); eatb2.draw(screen)
fn: exAnimTranspBox2.py
def launchRect():
def draw():           
def on_key_down(key): launchRect()
fn: exAnimTranspBox3.py
def launchRect():
def draw():           
def on_key_down(key): launchRect()
fn: exAnimTranspBox4.py
def launchRect():
def draw():           
def on_key_down(key): launchRect()
fn: exButtonArray01.py
def draw():      screen.clear(); eba1.draw(screen)
def on_mouse_down(pos):          eba1.on_mouse_down(pos)
fn: exButtonArray02.py
def draw(): 
def on_mouse_down(pos):          
fn: exButtonArray03.py
def draw(): 
def on_mouse_down(pos):          
fn: exButtonArray04.py
def draw(): 
def on_mouse_down(pos):          
def on_key_down(key): #initially hardwired; sigh
fn: exButtonArray04b.py
def draw(): 
def on_mouse_down(pos):          
def on_key_down(key): #initially hardwired; sigh
fn: exPg0.py
fn: exPg1.py
def draw(): a.draw()
fn: exPg2.py
def draw():             a.draw()
def on_mouse_down(pos): print("mouse pressed")
def on_mouse_up(pos):   print("mouse released")
fn: exPg3.py
def draw():             a.draw()
def on_mouse_down(pos): 
fn: exPg4.py
def draw(): 
def on_mouse_down(pos): 
fn: exPg5.py
def draw(): 
def on_mouse_down(pos): 
def drawReading(reading, x0, y0):
fn: exPg6.py
def draw(): 
def on_mouse_down(pos): 
def drawReading(reading, x0, y0):
fn: exPg7.py
def draw(): 
def on_mouse_down(pos): 
def drawReading(reading, x0, y0):
fn: exPg8.py
class ReadingsPg(Readings):
  def __init__(self): 
  def err(self, msg): print("ReadingPg error:", msg); traceback.print_exc()
  def buildUI(self): 
  def draw(self, screen): 
  def on_mouse_down(self, pos): 
  def drawReading(self, screen, reading, x0, y0):
def draw(): screen.clear(); rpg.draw(screen)
def on_mouse_down(pos):     rpg.on_mouse_down(pos)
fn: exPg9.py
def draw(): screen.clear();      rpg.draw(screen)
def on_mouse_down(pos):          rpg.on_mouse_down(pos)
def on_mouse_move(rel, buttons): rpg.on_mouse_move(rel, buttons)
def on_mouse_up():               rpg.on_mouse_up()
fn: exTransp09.py
class exTransp09(enoTranspWinDance): 
  def subwinAnimBounce(self, whichSubwin, nextDest, subsequentDest):
  def firstFrame(self): # invoked on rendering of first frame
def draw(): et9.draw() #requires invocation via pgzrun, per its ~simplification of scope
class Reading: #not catching any errors; caveat emptor
  def setFieldsFromYaml(self, yd):
  def __init__(self):              self.fieldsDict = {}
  def setField(self, field, val):  self.fieldsDict[field] = val
  def getField(self, field):       return self.fieldsDict[field]
  def printReadingAbbrev(self):    print(self.fieldsDict['abbrevTitle'])
class Readings: #not catching any errors; caveat emptor
  def __init__(self): self.readingList = []
  def loadYaml(self): 
  def printReadingAbbrevs(self): 
fn: exY5.py
class Reading: #not catching any errors; caveat emptor
  def setFieldsFromYaml(self, yd):
  def err(self, msg):              print("Reading error:", msg); traceback.print_exc()
  def __init__(self):              self.fieldsDict = {}
  def setField(self, field, val):  
  def getField(self, field):       
  def printReadingAbbrev(self):    
class Readings: #not catching any errors; caveat emptor
  def __init__(self): self.readingList = []
  def err(self, msg): print("Readings error:", msg); traceback.print_exc()
  def loadYaml(self): 
  def printReadingAbbrevs(self): 
fn: exY6.py
fn: hccRd01.py
def draw(): 
def on_mouse_down(pos):          
def on_mouse_up():               rpg.on_mouse_up()
def on_mouse_move(rel, buttons): rpg.on_mouse_move(rel, buttons)
def on_key_down(key): #initially hardwired; sigh
fn: hccRd02.py
def draw(): 
def on_mouse_down(pos):          
def on_mouse_up():               rpga.on_mouse_up()
def on_mouse_move(rel, buttons): rpga.on_mouse_move(rel, buttons)
def on_key_down(key): hrkm.on_key_down(key, rpga)
def on_key_up(key):   hrkm.on_key_up(key,   rpga)
fn: hccReadingsPg.py
class ReadingsPg(Readings):
  def __init__(self): 
  def err(self, msg): print("ReadingPg error:", msg); traceback.print_exc()
  def buildUI(self): 
  def draw(self, screen): 
  def on_mouse_down(self, pos): 
  def on_mouse_move(self, rel, buttons): 
  def on_mouse_up(self): self.actorSelectedId = None
  def drawReading(self, screen, readingId, x0, y0):
  def draw(): screen.clear(); rpg.draw(screen)
  def on_mouse_down(pos):     rpg.on_mouse_down(pos)
fn: hccReadingsPgAnim.py
class ReadingsPgAnim(ReadingsPg):
  def __init__(self, **kwargs):
    self.__dict__.update(kwargs) #allow class fields to be passed in constructor
  def err(self, msg): print("ReadingPgAnim error:", msg); traceback.print_exc()
  def calcActorHaloCoords(self, actor): 
  def calcActorsHaloCoords(self): 
  def draw(self, screen): 
def draw(): screen.clear(); rpga.draw(screen)
def on_mouse_down(pos):     rpga.on_mouse_down(pos)
fn: hccReadingsYaml.py
class Reading: #not catching any errors; caveat emptor
  def __init__(self): self.fieldsDict = {}
  def err(self, msg): print("Reading error:", msg); traceback.print_exc()
  def setFieldsFromYaml(self, yd):
  def setField(self, field, val):  
  def getField(self, field):       
  def getFields(self, fields):       
  def printReadingAbbrev(self):    
  def print(self): print(self.fieldsDict)   
class Readings: #not catching any errors; caveat emptor
  def __init__(self): self.readingList = []; self.loadYaml()
  def err(self, msg): print("Readings error:", msg); traceback.print_exc()
  def size(self): 
  def loadYaml(self): 
  def printReadingAbbrevs(self): 
  def getReading(self, i): 
